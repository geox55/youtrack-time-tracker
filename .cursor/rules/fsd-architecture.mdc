---
alwaysApply: true
---

# FSD Architecture Rules

## Структура проекта

```
src/
├── app/           # Общие вещи приложения
│   ├── providers/ # Провайдеры (Router, Store, Theme)
│   ├── styles/    # Глобальные стили
│   └── index.tsx  # Точка входа
├── features/      # Фичи приложения
│   └── feature-name/
│       ├── ui/           # UI компоненты фичи
│       ├── model/        # Бизнес-логика, хуки, стейт
│       ├── index.ts      # Публичный API фичи
│       └── types.ts      # Типы фичи
└── shared/        # Переиспользуемые модули
    ├── api/       # HTTP клиенты, API методы
    ├── lib/       # Утилиты, хелперы
    ├── model/     # Общие типы, константы
    ├── ui/        # Базовые UI компоненты
    └── index.ts   # Публичный API shared
```

## Правила организации

### App слой
- **Назначение**: Глобальная конфигурация приложения
- **Содержит**: Провайдеры, роутинг, глобальные стили, конфигурацию
- **Импорты**: Только из shared и features
- **Экспорты**: Точка входа приложения

```typescript
// app/providers/AppProvider.tsx
import { RouterProvider } from 'react-router-dom'
import { ThemeProvider } from 'shared/ui'

export const AppProvider = () => {
  return (
    <ThemeProvider>
      <RouterProvider router={router} />
    </ThemeProvider>
  )
}
```

### Features слой
- **Назначение**: Бизнес-фичи приложения
- **Структура**: Каждая фича изолирована
- **Импорты**: Только из shared и других features
- **Экспорты**: Публичный API через index.ts

```typescript
// features/auth/ui/LoginForm.tsx
import { Button } from 'shared/ui'
import { useAuth } from '../model'

export const LoginForm = () => {
  const { login } = useAuth()
  // ...
}

// features/auth/model/useAuth.ts
import { useState } from 'react'
import { authApi } from 'shared/api'

export const useAuth = () => {
  const [user, setUser] = useState(null)
  // ...
}
```

### Shared слой
- **Назначение**: Переиспользуемые модули
- **Структура**: По типам ресурсов
- **Импорты**: Только внутри shared
- **Экспорты**: Публичный API через index.ts

```typescript
// shared/ui/Button/Button.tsx
interface ButtonProps {
  variant: 'primary' | 'secondary'
  children: React.ReactNode
}

export const Button = ({ variant, children }: ButtonProps) => {
  // ...
}

// shared/api/auth.ts
export const authApi = {
  login: (credentials: LoginCredentials) => fetch('/api/auth', {
    method: 'POST',
    body: JSON.stringify(credentials)
  })
}
```

## Правила импортов

### Разрешённые импорты:
- `app` → `features`, `shared`
- `features` → `shared`, другие `features`
- `shared` → только внутри `shared`

### Запрещённые импорты:
- ❌ `shared` → `features`
- ❌ `shared` → `app`
- ❌ `features` → `app`

## Структура фичи

```
features/user-profile/
├── ui/
│   ├── UserCard.tsx
│   ├── UserForm.tsx
│   └── index.ts
├── model/
│   ├── useUser.ts
│   ├── userStore.ts
│   └── index.ts
├── types.ts
└── index.ts
```

### UI компоненты фичи
- Содержат только презентационную логику
- Получают данные через пропсы или хуки
- Не содержат бизнес-логику

```typescript
// features/user-profile/ui/UserCard.tsx
interface UserCardProps {
  user: User
  onEdit: (user: User) => void
}

export const UserCard = ({ user, onEdit }: UserCardProps) => {
  return (
    <div>
      <h3>{user.name}</h3>
      <button onClick={() => onEdit(user)}>Edit</button>
    </div>
  )
}
```

### Model слой фичи
- Содержит бизнес-логику
- Хуки для работы с данными
- Стейт-менеджмент
- API вызовы

```typescript
// features/user-profile/model/useUser.ts
import { useState, useEffect } from 'react'
import { userApi } from 'shared/api'

export const useUser = (userId: string) => {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    const fetchUser = async () => {
      setLoading(true)
      const userData = await userApi.getUser(userId)
      setUser(userData)
      setLoading(false)
    }
    fetchUser()
  }, [userId])

  return { user, loading }
}
```

## Публичные API

### Фича экспортирует только необходимое
```typescript
// features/user-profile/index.ts
export { UserCard } from './ui'
export { useUser } from './model'
export type { User } from './types'
```

### Shared экспортирует по категориям
```typescript
// shared/index.ts
export * from './ui'
export * from './api'
export * from './lib'
export * from './model'
```

## Именование файлов

### Компоненты
- PascalCase: `UserCard.tsx`
- Папки: kebab-case: `user-card/`

### Хуки
- camelCase с префиксом use: `useUser.ts`

### Утилиты
- camelCase: `formatDate.ts`

### Типы
- PascalCase: `UserTypes.ts`

## Примеры структуры

### Простая фича
```
features/counter/
├── ui/
│   └── Counter.tsx
├── model/
│   └── useCounter.ts
└── index.ts
```

### Сложная фича
```
features/order-management/
├── ui/
│   ├── OrderList.tsx
│   ├── OrderCard.tsx
│   ├── OrderForm.tsx
│   └── index.ts
├── model/
│   ├── useOrders.ts
│   ├── useOrderForm.ts
│   ├── orderStore.ts
│   └── index.ts
├── types.ts
└── index.ts
```

## Антипаттерны

### ❌ Неправильно
```typescript
// features/auth/ui/LoginForm.tsx
import { api } from 'shared/api'
import { useState } from 'react'

// Прямой API вызов в UI компоненте
export const LoginForm = () => {
  const [loading, setLoading] = useState(false)
  
  const handleSubmit = async (data) => {
    setLoading(true)
    await api.login(data) // Бизнес-логика в UI
    setLoading(false)
  }
}
```

### ✅ Правильно
```typescript
// features/auth/ui/LoginForm.tsx
import { useAuth } from '../model'

export const LoginForm = () => {
  const { login, loading } = useAuth()
  
  const handleSubmit = (data) => {
    login(data) // Логика в model слое
  }
}

// features/auth/model/useAuth.ts
import { api } from 'shared/api'

export const useAuth = () => {
  const [loading, setLoading] = useState(false)
  
  const login = async (data) => {
    setLoading(true)
    await api.login(data)
    setLoading(false)
  }
  
  return { login, loading }
}
```

## Миграция существующего кода

1. **Выделить фичи** из монолитного компонента
2. **Создать shared** для переиспользуемых частей
3. **Разделить UI и model** в каждой фиче
4. **Настроить публичные API** через index.ts
5. **Проверить импорты** на соответствие правилам# FSD Architecture Rules

## Структура проекта

```
src/
├── app/           # Общие вещи приложения
│   ├── providers/ # Провайдеры (Router, Store, Theme)
│   ├── styles/    # Глобальные стили
│   └── index.tsx  # Точка входа
├── features/      # Фичи приложения
│   └── feature-name/
│       ├── ui/           # UI компоненты фичи
│       ├── model/        # Бизнес-логика, хуки, стейт
│       ├── index.ts      # Публичный API фичи
│       └── types.ts      # Типы фичи
└── shared/        # Переиспользуемые модули
    ├── api/       # HTTP клиенты, API методы
    ├── lib/       # Утилиты, хелперы
    ├── model/     # Общие типы, константы
    ├── ui/        # Базовые UI компоненты
    └── index.ts   # Публичный API shared
```

## Правила организации

### App слой
- **Назначение**: Глобальная конфигурация приложения
- **Содержит**: Провайдеры, роутинг, глобальные стили, конфигурацию
- **Импорты**: Только из shared и features
- **Экспорты**: Точка входа приложения

```typescript
// app/providers/AppProvider.tsx
import { RouterProvider } from 'react-router-dom'
import { ThemeProvider } from 'shared/ui'

export const AppProvider = () => {
  return (
    <ThemeProvider>
      <RouterProvider router={router} />
    </ThemeProvider>
  )
}
```

### Features слой
- **Назначение**: Бизнес-фичи приложения
- **Структура**: Каждая фича изолирована
- **Импорты**: Только из shared и других features
- **Экспорты**: Публичный API через index.ts

```typescript
// features/auth/ui/LoginForm.tsx
import { Button } from 'shared/ui'
import { useAuth } from '../model'

export const LoginForm = () => {
  const { login } = useAuth()
  // ...
}

// features/auth/model/useAuth.ts
import { useState } from 'react'
import { authApi } from 'shared/api'

export const useAuth = () => {
  const [user, setUser] = useState(null)
  // ...
}
```

### Shared слой
- **Назначение**: Переиспользуемые модули
- **Структура**: По типам ресурсов
- **Импорты**: Только внутри shared
- **Экспорты**: Публичный API через index.ts

```typescript
// shared/ui/Button/Button.tsx
interface ButtonProps {
  variant: 'primary' | 'secondary'
  children: React.ReactNode
}

export const Button = ({ variant, children }: ButtonProps) => {
  // ...
}

// shared/api/auth.ts
export const authApi = {
  login: (credentials: LoginCredentials) => fetch('/api/auth', {
    method: 'POST',
    body: JSON.stringify(credentials)
  })
}
```

## Правила импортов

### Разрешённые импорты:
- `app` → `features`, `shared`
- `features` → `shared`, другие `features`
- `shared` → только внутри `shared`

### Запрещённые импорты:
- ❌ `shared` → `features`
- ❌ `shared` → `app`
- ❌ `features` → `app`

## Структура фичи

```
features/user-profile/
├── ui/
│   ├── UserCard.tsx
│   ├── UserForm.tsx
│   └── index.ts
├── model/
│   ├── useUser.ts
│   ├── userStore.ts
│   └── index.ts
├── types.ts
└── index.ts
```

### UI компоненты фичи
- Содержат только презентационную логику
- Получают данные через пропсы или хуки
- Не содержат бизнес-логику

```typescript
// features/user-profile/ui/UserCard.tsx
interface UserCardProps {
  user: User
  onEdit: (user: User) => void
}

export const UserCard = ({ user, onEdit }: UserCardProps) => {
  return (
    <div>
      <h3>{user.name}</h3>
      <button onClick={() => onEdit(user)}>Edit</button>
    </div>
  )
}
```

### Model слой фичи
- Содержит бизнес-логику
- Хуки для работы с данными
- Стейт-менеджмент
- API вызовы

```typescript
// features/user-profile/model/useUser.ts
import { useState, useEffect } from 'react'
import { userApi } from 'shared/api'

export const useUser = (userId: string) => {
  const [user, setUser] = useState<User | null>(null)
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    const fetchUser = async () => {
      setLoading(true)
      const userData = await userApi.getUser(userId)
      setUser(userData)
      setLoading(false)
    }
    fetchUser()
  }, [userId])

  return { user, loading }
}
```

## Публичные API

### Фича экспортирует только необходимое
```typescript
// features/user-profile/index.ts
export { UserCard } from './ui'
export { useUser } from './model'
export type { User } from './types'
```

### Shared экспортирует по категориям
```typescript
// shared/index.ts
export * from './ui'
export * from './api'
export * from './lib'
export * from './model'
```

## Именование файлов

### Компоненты
- PascalCase: `UserCard.tsx`
- Папки: kebab-case: `user-card/`

### Хуки
- camelCase с префиксом use: `useUser.ts`

### Утилиты
- camelCase: `formatDate.ts`

### Типы
- PascalCase: `UserTypes.ts`

## Примеры структуры

### Простая фича
```
features/counter/
├── ui/
│   └── Counter.tsx
├── model/
│   └── useCounter.ts
└── index.ts
```

### Сложная фича
```
features/order-management/
├── ui/
│   ├── OrderList.tsx
│   ├── OrderCard.tsx
│   ├── OrderForm.tsx
│   └── index.ts
├── model/
│   ├── useOrders.ts
│   ├── useOrderForm.ts
│   ├── orderStore.ts
│   └── index.ts
├── types.ts
└── index.ts
```

## Антипаттерны

### ❌ Неправильно
```typescript
// features/auth/ui/LoginForm.tsx
import { api } from 'shared/api'
import { useState } from 'react'

// Прямой API вызов в UI компоненте
export const LoginForm = () => {
  const [loading, setLoading] = useState(false)
  
  const handleSubmit = async (data) => {
    setLoading(true)
    await api.login(data) // Бизнес-логика в UI
    setLoading(false)
  }
}
```

### ✅ Правильно
```typescript
// features/auth/ui/LoginForm.tsx
import { useAuth } from '../model'

export const LoginForm = () => {
  const { login, loading } = useAuth()
  
  const handleSubmit = (data) => {
    login(data) // Логика в model слое
  }
}

// features/auth/model/useAuth.ts
import { api } from 'shared/api'

export const useAuth = () => {
  const [loading, setLoading] = useState(false)
  
  const login = async (data) => {
    setLoading(true)
    await api.login(data)
    setLoading(false)
  }
  
  return { login, loading }
}
```

## Миграция существующего кода

1. **Выделить фичи** из монолитного компонента
2. **Создать shared** для переиспользуемых частей
3. **Разделить UI и model** в каждой фиче
4. **Настроить публичные API** через index.ts
5. **Проверить импорты** на соответствие правилам